import { c as create_ssr_component, o as onDestroy, d as add_attribute } from "./ssr.js";
/* empty css                                      */
const css = {
  code: ".tooltip.svelte-143153r{animation:svelte-143153r-fadeIn 0.2s ease-out}@keyframes svelte-143153r-fadeIn{from{opacity:0;transform:scale(0.9) translateY(10px)}to{opacity:1;transform:scale(1) translateY(0)}}.tooltip.svelte-143153r{box-shadow:0 20px 25px -5px rgba(0, 0, 0, 0.3),\n      0 10px 10px -5px rgba(0, 0, 0, 0.2),\n      0 0 0 1px rgba(59, 130, 246, 0.3),\n      0 0 20px rgba(59, 130, 246, 0.15)}@media(hover: none) and (pointer: coarse){.tooltip.svelte-143153r{pointer-events:auto}}",
  map: '{"version":3,"file":"Tooltip.svelte","sources":["Tooltip.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount, onDestroy } from \\"svelte\\";\\nexport let content;\\nexport let delay = 300;\\nlet tooltipElement;\\nlet targetElement;\\nlet isVisible = false;\\nlet isMobile = false;\\nlet timeoutId;\\nonMount(() => {\\n  isMobile = \\"ontouchstart\\" in window || navigator.maxTouchPoints > 0;\\n  return () => {\\n    if (timeoutId) clearTimeout(timeoutId);\\n  };\\n});\\nfunction showTooltip() {\\n  if (isMobile) return;\\n  if (timeoutId) clearTimeout(timeoutId);\\n  timeoutId = setTimeout(() => {\\n    isVisible = true;\\n    requestAnimationFrame(() => {\\n      positionTooltip();\\n    });\\n  }, delay);\\n}\\nfunction hideTooltip() {\\n  if (timeoutId) clearTimeout(timeoutId);\\n  isVisible = false;\\n}\\nfunction handleMobileTouch(event) {\\n  if (!isMobile) return;\\n  event.preventDefault();\\n  isVisible = !isVisible;\\n  if (isVisible) {\\n    requestAnimationFrame(() => {\\n      positionTooltip();\\n    });\\n    const handleOutsideTouch = (e) => {\\n      if (!tooltipElement?.contains(e.target) && !targetElement?.contains(e.target)) {\\n        isVisible = false;\\n        document.removeEventListener(\\"touchstart\\", handleOutsideTouch);\\n      }\\n    };\\n    setTimeout(() => {\\n      document.addEventListener(\\"touchstart\\", handleOutsideTouch);\\n    }, 100);\\n  }\\n}\\nfunction positionTooltip() {\\n  if (!tooltipElement || !targetElement) return;\\n  const targetRect = targetElement.getBoundingClientRect();\\n  const tooltipRect = tooltipElement.getBoundingClientRect();\\n  const viewportWidth = window.innerWidth;\\n  const viewportHeight = window.innerHeight;\\n  const rightOffset = viewportWidth * 0.15;\\n  const bottomOffset = viewportHeight * 0.15;\\n  const left = viewportWidth - tooltipRect.width - rightOffset;\\n  const top = viewportHeight - tooltipRect.height - bottomOffset;\\n  const minPadding = 20;\\n  const finalLeft = Math.max(minPadding, Math.min(left, viewportWidth - tooltipRect.width - minPadding));\\n  const finalTop = Math.max(minPadding, Math.min(top, viewportHeight - tooltipRect.height - minPadding));\\n  tooltipElement.style.top = `${finalTop}px`;\\n  tooltipElement.style.left = `${finalLeft}px`;\\n  const tooltipCenterX = finalLeft + tooltipRect.width / 2;\\n  const tooltipCenterY = finalTop + tooltipRect.height / 2;\\n  const targetCenterX = targetRect.left + targetRect.width / 2;\\n  const targetCenterY = targetRect.top + targetRect.height / 2;\\n  const deltaX = targetCenterX - tooltipCenterX;\\n  const deltaY = targetCenterY - tooltipCenterY;\\n  tooltipElement.dataset.arrowDirection = \\"none\\";\\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\\n    if (deltaX < 0) {\\n      tooltipElement.dataset.arrowDirection = \\"left\\";\\n    } else {\\n      tooltipElement.dataset.arrowDirection = \\"right\\";\\n    }\\n  } else {\\n    if (deltaY < 0) {\\n      tooltipElement.dataset.arrowDirection = \\"top\\";\\n    } else {\\n      tooltipElement.dataset.arrowDirection = \\"bottom\\";\\n    }\\n  }\\n}\\nonDestroy(() => {\\n  if (timeoutId) clearTimeout(timeoutId);\\n});\\n<\/script>\\n\\n<div \\n  bind:this={targetElement}\\n  class=\\"inline-block\\"\\n  on:mouseenter={showTooltip}\\n  on:mouseleave={hideTooltip}\\n  on:focus={showTooltip}\\n  on:blur={hideTooltip}\\n  on:touchstart={handleMobileTouch}\\n  role=\\"button\\"\\n  tabindex=\\"0\\"\\n  aria-label=\\"More information\\"\\n>\\n  <slot>\\n    <div class=\\"inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-100 hover:bg-blue-200 transition-all hover:scale-110 cursor-help\\">\\n      <svg\\n        class=\\"h-4 w-4 text-blue-600\\"\\n        fill=\\"none\\"\\n        viewBox=\\"0 0 24 24\\"\\n        stroke=\\"currentColor\\"\\n        aria-hidden=\\"true\\"\\n      >\\n        <path\\n          stroke-linecap=\\"round\\"\\n          stroke-linejoin=\\"round\\"\\n          stroke-width=\\"2.5\\"\\n          d=\\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\\"\\n        />\\n      </svg>\\n    </div>\\n  </slot>\\n</div>\\n\\n{#if isVisible}\\n  <div\\n    bind:this={tooltipElement}\\n    class=\\"tooltip fixed z-50 px-4 py-3 text-base text-white bg-gradient-to-br from-gray-900 to-gray-800 rounded-lg shadow-2xl pointer-events-none max-w-[400px] border border-gray-700\\"\\n    role=\\"tooltip\\"\\n  >\\n    <div class=\\"relative\\">\\n      <div class=\\"font-bold text-blue-400 mb-2 text-sm uppercase tracking-wider\\">\\n        Feature Product Value:\\n      </div>\\n      <div class=\\"leading-relaxed\\">\\n        {content}\\n      </div>\\n    </div>\\n  </div>\\n{/if}\\n\\n<style>\\n  .tooltip {\\n    animation: fadeIn 0.2s ease-out;\\n  }\\n  \\n  \\n  @keyframes fadeIn {\\n    from {\\n      opacity: 0;\\n      transform: scale(0.9) translateY(10px);\\n    }\\n    to {\\n      opacity: 1;\\n      transform: scale(1) translateY(0);\\n    }\\n  }\\n  \\n  /* Add subtle glow effect */\\n  .tooltip {\\n    box-shadow: \\n      0 20px 25px -5px rgba(0, 0, 0, 0.3),\\n      0 10px 10px -5px rgba(0, 0, 0, 0.2),\\n      0 0 0 1px rgba(59, 130, 246, 0.3),\\n      0 0 20px rgba(59, 130, 246, 0.15);\\n  }\\n  \\n  /* Mobile-specific styles */\\n  @media (hover: none) and (pointer: coarse) {\\n    .tooltip {\\n      pointer-events: auto;\\n    }\\n  }\\n</style>"],"names":[],"mappings":"AA0IE,uBAAS,CACP,SAAS,CAAE,qBAAM,CAAC,IAAI,CAAC,QACzB,CAGA,WAAW,qBAAO,CAChB,IAAK,CACH,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,GAAG,CAAC,CAAC,WAAW,IAAI,CACvC,CACA,EAAG,CACD,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAClC,CACF,CAGA,uBAAS,CACP,UAAU,CACR,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AACzC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AACzC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;AACvC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CACpC,CAGA,MAAO,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,MAAM,CAAE,CACzC,uBAAS,CACP,cAAc,CAAE,IAClB,CACF"}'
};
const Tooltip = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { content } = $$props;
  let { delay = 300 } = $$props;
  let targetElement;
  onDestroy(() => {
  });
  if ($$props.content === void 0 && $$bindings.content && content !== void 0) $$bindings.content(content);
  if ($$props.delay === void 0 && $$bindings.delay && delay !== void 0) $$bindings.delay(delay);
  $$result.css.add(css);
  return `<div class="inline-block" role="button" tabindex="0" aria-label="More information"${add_attribute("this", targetElement, 0)}>${slots.default ? slots.default({}) : ` <div class="inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-100 hover:bg-blue-200 transition-all hover:scale-110 cursor-help" data-svelte-h="svelte-26q2nf"><svg class="h-4 w-4 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg></div> `}</div> ${``}`;
});
export {
  Tooltip as T
};
